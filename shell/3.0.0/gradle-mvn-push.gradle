// v3.0.0-2023/05/05
// 参考: https://www.jianshu.com/p/aa9efc8fba3d
apply plugin: 'maven-publish'

ext["authUsername"] = ''
ext["authPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

afterEvaluate { project ->
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task upload(group: 'upload', dependsOn: assembleRelease) {

        }
        upload.finalizedBy(publish)

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            archiveClassifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            archiveClassifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }
    } else {
        install {
            repositories.mavenInstaller {
                configurePom(pom)
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            archiveClassifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }

    publishing {
        repositories {
            maven {
                allowInsecureProtocol = true
                credentials {
                    username authUsername
                    password authPassword
                }
                url RELEASE_REPOSITORY_URL
            }
        }

        publications {
            maven(MavenPublication) {
                String pomVersion = project.properties.get("POM_VERSION")
                if (pomVersion == null) {
                    if (project.getPlugins().hasPlugin('com.android.application') ||
                            project.getPlugins().hasPlugin('com.android.library')) {
                        pomVersion = android.defaultConfig.versionName
                    } else {
                        throw new RuntimeException("please add POM_VERSION on gradle.properties file")
                    }
                }
                String pomArtifactId = project.properties.get("POM_ARTIFACT_ID")
                if (pomArtifactId == null) {
                    pomArtifactId = project.name
                }

                String pomPackaging = project.properties.get('POM_PACKAGING')
                if (pomPackaging == null) {
                    pomPackaging = "aar"
                }
                groupId POM_GROUP_ID
                artifactId pomArtifactId
                version pomVersion
                artifact androidSourcesJar
                artifact androidJavadocsJar
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }

                pom {
                    name = POM_NAME
                }
                pom.withXml {
                    def oldSize = 0
                    def newSize = 0
                    // 读取忽略列表
                    def ignoreDeps = findIgnoreDependencies()
                    println('whenConfigured ignoreDeps ' + ignoreDeps)
                    def realDependencies = []
                    project.configurations.all { configuration ->
                        def name = configuration.name
                        if (name != "implementation" && name != "compile" && name != "api") {
                            return
                        }
                        configuration.dependencies.each {
                            if (it.name == "unspecified" || it.version == 'unspecified') {
                                // 忽略无法识别的
                                return
                            }
                            if (it instanceof ProjectDependency) {
                                return
                            }
                            oldSize++
                            // def temp = isIgnoreDependency(ignoreDeps, it.group, it.name)
                            // println(name + " " + it.group + " " + it.name + " " + it.version + " " + temp)
                            if (!isIgnoreDependency(ignoreDeps, it.group, it.name)) {
                                newSize++
                                realDependencies.add(it)
                            }
                        }
                    }
                    println('whenConfigured after old:' + oldSize + " new:" + newSize)
                    if (newSize > 0) {
                        def dependenciesNode = asNode().appendNode("dependencies")
                        realDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {//防止编码问题
                enabled = false
                options.addStringOption('Xdoclint:none', '-quiet')
                options.addStringOption('encoding', 'UTF-8')
                options.addStringOption('charSet', 'UTF-8')
            }
        }
    }

}

def configurePom(pom) {
}

def findIgnoreDependencies() {
    // 读取忽略列表
    String pomDepsIgnore = project.properties.get("POM_DEPS_IGNORE")
    def ignoreDeps = []
    if (pomDepsIgnore != null && !pomDepsIgnore.isEmpty()) {
        def splits = pomDepsIgnore.split(',')
        if (splits != null) {
            splits.each { split ->
                def trim = split.trim()
                def splits_1 = trim.split(":")
                String[] result = new String[2]
                if (splits_1.length == 1) {
                    if (splits_1[0].length() > 0) {
                        result[0] = splits_1[0]
                        result[1] = ""
                        ignoreDeps.add(result)
                    }
                } else if (splits_1.length > 1) {
                    result[0] = splits_1[0]
                    result[1] = splits_1[1]
                    ignoreDeps.add(result)
                }
//                println("trim " + splits_1 + " " + splits_1.length)
            }
        }
    }
    return ignoreDeps
}

def isIgnoreDependency(ArrayList<String[]> ignoreDeps, String groupId, String name) {
    if (ignoreDeps == null) {
        return false
    }

    for (String[] dep : ignoreDeps) {
        if (dep[0].length() > 0) {
            if (groupId != dep[0]) {
                continue
            }
        }
        if (dep[1].length() > 0) {
            if (name != dep[1]) {
                continue
            }
        }
        return true
    }
    return false
}
